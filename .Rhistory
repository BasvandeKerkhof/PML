nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, C)
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray - 1, InsectSprays)
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2] - fit$coef[3]
(fit$coef[2]-fit$coef[3])/1.6011
exit()
quit()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n<- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
pBeta1
sigma
data(mtcars)
fit<- lm(mpg ~weight, mtcars)
names(mtcatrs)
names(mtcars)
fit<- lm(mpg ~wt, mtcars)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
summary(fit)
sumCoef
sumCoef[2,1] + c(-1, 1) * qt(.95, df = fit$df) * sumCoef[2, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
?mtcars
sumCoef[2,1] + sumCoef[2,2]*3000
sumCoef[2,1] + sumCoef[2,1]*3000
sumCoef[2,1] + sumCoef[2,1]*3
p2<- predict(fit, c(3), interval = ("prediction"))
p2<- predict(fit, c(wt = 3), interval = ("prediction"))
p2<- predict(fit, data.frame(wt = 3), interval = ("prediction"))
p2
p1<- predict(fit, data.frame(wt = 2), interval = ("confidence"))
p1
fit1<- lm(mpg ~wt, mtcars)
fit1<- lm(mpg ~wt -1, mtcars)
fit2<- lm(mpg ~wt -1, mtcars)
fit1<- lm(mpg ~wt, mtcars)
p1<-predict(fit1)
p1
p2<-predict(fit2)
sum((Y-p1)^2)/sum((Y-p2)^2)
sum((mtcars$mpg-p1)^2)/sum((mtcars$mpg-p2)^2)
sum((mtcars$mpg-p2)^2)/sum((mtcars$mpg-p1)^2)
fit<- lm(mtcars$mpg~I(mtcars$wt/2))
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit<- lm(mtcars$mpg~I(mtcars$wt*2))
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
fit1<- lm(mpg ~wt, mtcars)
fit2<- lm(mpg ~1, mtcars)
p1<-predict(fit1)
p2<-predict(fit2)
sse1<-sum((mtcars$mpg-p1)^2)
sse2<-sum((mtcars$mpg-p2)^2)
sse1/sse2
sse2/sse1
sse1/sse2
fit1<- lm(mpg ~wt, mtcars)
p1<-predict(fit1, interval = c("confidence"))
p1
p1<-predict(fit1, data.frame(wt = mean(mtcars$)), interval = c("confidence"))
p1<-predict(fit1, data.frame(wt = mean(mtcars$wt)), interval = c("confidence"))
p1
1100 + qt(0.975, 9)*30/sqrt(9)
1100 + qt(0.95, 9)*30/sqrt(9)
1100 - qt(0.975, 9)*30/sqrt(9)
1100 - qt(0.95, 9)*30/sqrt(9)
2*sqrt(9)/qt(0.975,9)
2*sqrt(9)/qt(0.95,9)
>?qt
?qt
SP = sqrt((9*0.68+9*0.6)/18)
qt(0.025, 18
)
qt(0.025, 18)*SP*sqrt(1/10+1/10)
3-5+qt(0.025, 18)*SP*sqrt(1/10+1/10)
3-5-qt(0.025, 18)*SP*sqrt(1/10+1/10)
6-4-qz(0.025, 198)*SP*sqrt(1/100+1/100)
6-4-qnorm(0.025, 198)*SP*sqrt(1/100+1/100)
SP = sqrt((99*0.25+99*4)/98)
6-4-qnorm(0.025, 198)*SP*sqrt(1/100+1/100)
6-4+qnorm(0.025, 198)*SP*sqrt(1/100+1/100)
source('~/Data Science/Statistical Inference/course_project.R')
ls()
source('~/Data Science/Statistical Inference/course_project.R')
rexp(n, lambda)
?ddply
?apply
?runif
source('~/Data Science/Statistical Inference/course_project.R')
warni9ng()
warnings()
source('~/Data Science/Statistical Inference/course_project.R')
means
source('~/Data Science/Statistical Inference/course_project.R')
?var
source('~/Data Science/Statistical Inference/course_project.R')
sample_mean
1/lambda
sample_variance
1/(sqrt(1000)*lambda)
# set constants
λ <- 0.2# lambda for rexp
n <- 40 # number of exponetials
numberOfSimulations <- 1000 # number of tests
# set the seed to create reproducability
set.seed(11081979)
# run the test resulting in n x numberOfSimulations matrix
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, λ), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
# set constants
lam<- 0.2
n <- 40
numberOfSimulations <- 1000
set.seed(11081979)
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, lam), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
lam<- 0.2
n <- 40
numberOfSimulations <- 1000
set.seed(11081979)
exponentialDistributions <- matrix(data=rexp(n * numberOfSimulations, lam), nrow=numberOfSimulations)
exponentialDistributionMeans <- data.frame(means=apply(exponentialDistributions, 1, mean))
exponentialDistributionMeans
?matrix
set.seed(1)
lambda <- 0.2
n <- 40
sims <- 1000
data <- matrix(data = NA, nrow = n, ncol = sims)
means <- numeric(sims)
data
means
means <- numeric(sims) = NA
?NA
sample_mean <- mean(means)
sample_variance <- var(means)
hist(means)
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
warnings()
source('~/Data Science/Statistical Inference/course_project.R')
data
means
source('~/Data Science/Statistical Inference/course_project.R')
means
source('~/Data Science/Statistical Inference/course_project.R')
sample_mean
theory_mean
sample_variance
theory_variance
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
?rnorm
normal_data <- mean(rnorm(n, mean = theory_mean, sd = sqrt(theory_variance)))
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
?geom_density
source('~/Data Science/Statistical Inference/course_project.R')
plot_data
head(plot_data)
summary(plot_data)
str(plot_data)
ggplot(plot_data) + geom_histogram(data = sample, alpha = 0.2) + geom_histogram(data = normal)
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
plot_data$sample
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
str(plot_data)
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
dat
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
?geom_histogram
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
5/30
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project.R')
source('~/Data Science/Statistical Inference/course_project2.R')
rm(list=ls())
source('~/Data Science/Statistical Inference/course_project2.R')
ls()
head(ToothGrowth)
?ToothGrowth
summary(ToothGrowth)
str(ToothGrowth)
unique(ToothGrowth$dose)
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
data_05
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/.active-rstudio-document')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
names(t_05_10)
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project2.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
print(plot2)
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/Data Science/Statistical Inference/course_project1.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?seq
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Data Science/Statistical Inference/course_project2.R')
t.test(data_VC$len, data_OJ$len)
?ToothGrowth
source('~/.active-rstudio-document', echo=TRUE)
?ToothGrowth
fit<-lm(mpg~factor(cyl)+wt, data=mtcars)
summary(fit)
fit2<-lm(mpg~factor(cyl)+wt, data=mtcars)
fit2<-lm(mpg~factor(cyl), data=mtcars)
summary(fit2)
fit3<-lm(mpg ~ I(interaction(factor(cyl), wt)), data=mtcars)
summary(fit3)
anova(fit, fit3, test = "Chisq")
fit3<-lm(mpg~factor(cyl)*wt, data=mtcars)
anova(fit, fit3, test = "Chisq")
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit5 <- lm(y ~ x)
hatvalues(fit5)
lm.influence(fit5)$hat
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit6 <- lm(y ~ x)
dfbetas(fit6)[, 2]
x <- c(140, 138, 150, 148, 135)
y <- c(132, 135, 151, 146, 130)
?t.test
t.test(x, y, paired = TRUE)
?qt
1100 + qt(0.95, 8)*30/sqrt(9)
1100 - qt(0.95, 8)*30/sqrt(9)
pbinom(3, size = 4, prob = 0.5, lower.tail = FALSE)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
?pbinom
pbinom(10, size = 1787, prob = 1/100, lower.tail = FALSE)
1-pbinom(10, size = 1787, prob = 1/100, lower.tail = FALSE)
1-pbinom(9, size = 1787, prob = 1/100, lower.tail = FALSE)
alpha = 0.05
z = qnorm(1 - alpha)
pnorm(0 + z * 0.04/sqrt(100), mean = 0.01, sd = 0.04/sqrt(100), lower.tail = FALS\
E)
pnorm(0 + z * 0.04/sqrt(100), mean = 0.01, sd = 0.04/sqrt(100), lower.tail = FALSE)
pnorm(0 + z * 0.04/sqrt(n), mean = 0.01, sd = 0.04/sqrt(n), lower.tail = FALSE)
n<-120
pnorm(0 + z * 0.04/sqrt(n), mean = 0.01, sd = 0.04/sqrt(n), lower.tail = FALSE)
n<-160
pnorm(0 + z * 0.04/sqrt(n), mean = 0.01, sd = 0.04/sqrt(n), lower.tail = FALSE)
n<-180
pnorm(0 + z * 0.04/sqrt(n), mean = 0.01, sd = 0.04/sqrt(n), lower.tail = FALSE)
n<-140
pnorm(0 + z * 0.04/sqrt(n), mean = 0.01, sd = 0.04/sqrt(n), lower.tail = FALSE)
glm(formula = use ~ not,
family = "binomial", data = shuttle)
shuttle
?shuttle
??shutle
library(MASS)
shuttle
glm(formula = use ~ not,
family = "binomial", data = shuttle)
glm(formula = use ~ wind,
family = "binomial", data = shuttle)
shuttle$usebin <- as.numeric(shuttle$use == "auto") # create a binary variable
fit <- glm(usebin ~ factor(wind) - 1, family = "binomial", data = shuttle)
fit
summary(fit)$coef
summary(fit)
source('~/Data Science/Regression models/Course_Project.R')
ls()
mtcars
a<- mtcars
ls()
head(a)
source('~/Data Science/Regression models/Course_Project.R')
?mtcars
?data
?mtcars
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
data
head(data)
class(data)
str(data)
data$am <- as.factor(data$am)
str(data)
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
?mtcars
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
>?step
?step
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
str(mtcars)
data(mtcars)
str(mtcars)
?mtcars
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
summary(model_end)
summary(model_start)
mtcars$am
source('~/Data Science/Regression models/Course_Project.R')
anova(model_simple, model_end)
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
source('~/Data Science/Regression models/Course_Project.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?t.test
model_simple <- lm(mpg ~ am, data = mtcars)
summary(model_simple)$
model_simple <- lm(mpg ~ am, data = mtcars)
summary(model_simple)\
model_simple <- lm(mpg ~ am, data = mtcars)
summary(model_simple)
summary(model_simple)$R
names(summary(model_simple))
names(anova(model_simple, model_end))
anova(model_simple, model_end)
names(t.test(mpg ~ am, data = mtcars))
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages{'caret'}
install.packages('caret')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
diagnosis
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$SuperPlasticizer)
training$SuperPlasticizer
training$Superplasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
View(training)
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
source('~/Data Science/Practical Machine Learning/Course_project/course_project.R')
library(rpart)
library(rpart.plot)
library(randomForest)
library(corrplot)
library(rattle)
